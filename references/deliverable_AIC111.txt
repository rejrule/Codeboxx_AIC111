=== AIC111 — Livrable (Test d’inférence) ===

Nom complet : [Jeremie Pivin]

URL de l’API (cloud) :
https://seyq4lqbog.execute-api.us-east-1.amazonaws.com/Prod/classify_digit/

Résumé
------
Cette API expose un endpoint POST /classify_digit qui prend un JSON { "x": <nombre> }
et renvoie { "prediction": y } avec un modèle jouet y = 3x + 1 (PyTorch CPU).

Répertoire du projet (dans ce repo) : test-inference/
Fichiers clés :
- test-inference/template.yaml        -> ressources SAM (Lambda + API Gateway)
- test-inference/app/app.py           -> code Lambda (handler app.lambda_handler)
- test-inference/app/requirements.txt -> dépendances (torch CPU uniquement)
- test-inference/events/event.json    -> exemple d’événement d’invocation
- test-inference/.aws-sam/*           -> artefacts générés par `sam build`

—
Tester RAPIDEMENT dans le CLOUD
-------------------------------
(Pré-requis : la stack CloudFormation “test-inference” est déployée.)

1) Appel simple (retour attendu: { "prediction": 7.0 })
   curl -s -X POST "https://seyq4lqbog.execute-api.us-east-1.amazonaws.com/Prod/classify_digit/"      -H "Content-Type: application/json"      -d "{"x": 2}"

2) Autre valeur :
   curl -s -X POST "https://seyq4lqbog.execute-api.us-east-1.amazonaws.com/Prod/classify_digit/"      -H "Content-Type: application/json"      -d "{"x": 10}"

—
Tester en LOCAL (optionnel)
---------------------------
(Pré-requis : Docker Desktop + AWS SAM CLI.)
Dans un terminal à la racine du repo :

cd test-inference
export AWS_PROFILE=sam-deployer
sam build --use-container
sam local start-api

Dans un autre terminal :
curl -s -X POST http://127.0.0.1:3000/classify_digit   -H "Content-Type: application/json"   -d "{"x": 2}"

—
Commandes utiles
----------------
# Consulter les logs de la Lambda déployée (cloud)
sam logs -n InferenceFunction --stack-name test-inference --tail

# Redéployer après modification de code
sam build --use-container && sam deploy

# Nettoyage (supprimer la stack et les ressources)
sam delete --stack-name test-inference

—
Chemins de 5 vidéos dans le repo
--------------------------------
(data/videos/)
- data/videos/recon_2022-01-02.mp4
- data/videos/recon_2022-02-22.mp4
- data/videos/recon_2022-03-01.mp4
- data/videos/recon_2022-03-04.mp4
- data/videos/recon_2022-03-15.mp4

Notes
-----
- L’API est publique sans authentification (choix pédagogique pour le module).
- Le runtime Lambda est Python 3.9 (image container AWS), torch CPU uniquement.
- Mémoire Lambda configurée à 512 MB.